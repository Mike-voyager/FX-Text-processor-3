[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"


[project]
name = "escp-editor"
version = "0.1.0"
description = "Professional WYSIWYG text editor for Epson FX-890 dot matrix printer with enterprise security"
authors = [
    {name = "ESC/P Text Editor Development Team"}
]
requires-python = ">=3.11"
license = {text = "MIT"}
readme = "README.md"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "Topic :: Security :: Cryptography",
    "Topic :: Office/Business",
]
keywords = [
    "escp",
    "epson",
    "fx-890",
    "printer",
    "editor",
    "security",
    "encryption",
    "digital-signature",
    "audit-log",
]


dependencies = [
    "pillow>=10.0.0",
    "qrcode>=7.4.2",
    "python-barcode>=0.15.1",
    "Markdown>=3.5.0",
    "openpyxl>=3.1.2",
]


[project.optional-dependencies]
# Development tools
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-timeout>=2.2.0",          # Timeout for crypto tests
    "pytest-mock>=3.12.0",            # Mocking for security tests
    "mypy>=1.8.0",
    "flake8>=7.0.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "types-Markdown>=3.5.0",
    "bandit>=1.7.5",                  # Security linting
    "safety>=3.0.0",                  # Dependency vulnerability scanning
]

# Windows-specific dependencies
windows = [
    "pywin32>=306",
]

# Security features (enterprise cryptography)
security = [
    # Core cryptography
    "cryptography>=43.0.0",           # PyCA - AES-256-GCM, Ed25519, X25519
    "pycryptodome>=3.20.0",           # Independent crypto library for diversity

    # Password hashing and key derivation
    "argon2-cffi>=23.1.0",            # Argon2id memory-hard KDF

    # OpenPGP integration
    "python-gnupg>=0.5.2",            # GPG wrapper for asymmetric encryption

    # Authentication
    "fido2>=1.1.3",                   # FIDO2/WebAuthn hardware tokens
    "PyJWT[crypto]>=2.8.0",           # JWT tokens with EdDSA signatures
    "pyotp>=2.9.0",                   # TOTP fallback (optional)

    # Additional security utilities
    "python-dateutil>=2.8.2",         # Timezone-aware datetime handling
]

# Audit and compliance
audit = [
    "python-json-logger>=2.0.7",      # Structured JSON logging
    "watchdog>=4.0.0",                # File system monitoring
]

# Full installation (all optional dependencies)
all = [
    "escp-editor[dev,windows,security,audit]",
]


[project.urls]
Homepage = "https://github.com/Mike-voyager/FX-Text-processor-3"
Documentation = "https://github.com/Mike-voyager/FX-Text-processor-3/tree/main/docs"
Repository = "https://github.com/Mike-voyager/FX-Text-processor-3"
Issues = "https://github.com/Mike-voyager/FX-Text-processor-3/issues"
Changelog = "https://github.com/Mike-voyager/FX-Text-processor-3/blob/main/CHANGELOG.md"
Security = "https://github.com/Mike-voyager/FX-Text-processor-3/blob/main/docs/SECURITY_ARCHITECTURE.md"


[tool.setuptools]
py-modules = []


[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
namespaces = false


[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
]
pythonpath = ["."]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "crypto: cryptographic algorithm tests with NIST vectors",
    "integration: integration tests requiring external services",
    "security: security-critical tests that must always pass",
]
timeout = 300  # 5 minutes max per test (for Argon2id tests)


[tool.mypy]
mypy_path = "."
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
python_version = "3.11"


[[tool.mypy.overrides]]
module = "src.*"
ignore_missing_imports = false


[[tool.mypy.overrides]]
module = [
    "gnupg.*",
    "fido2.*",
    "pyotp.*",
    "win32print.*",
    "win32ui.*",
]
ignore_missing_imports = true


[tool.black]
line-length = 88
target-version = ['py314']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''


[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = [
    ".venv/*",
    "build/*",
    "dist/*",
]


[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "**/__pycache__/*",
    "**/test_*.py",
    "src/security/setup.py",  # Interactive setup script
]
branch = true


[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"


# Security linting with bandit
[tool.bandit]
targets = ["src"]
exclude_dirs = ["tests", ".venv", "build"]
skips = [
    "B101",  # assert_used - we use assert in tests
    "B601",  # paramiko_calls - not using paramiko
]
severity = "medium"


# Dependency vulnerability scanning with safety
[tool.safety]
ignore = []
# Add CVE IDs here if false positives occur


# Flake8 configuration (in setup.cfg or .flake8 as flake8 doesn't support pyproject.toml natively)
# Create .flake8 file with:
# [flake8]
# max-line-length = 140
# extend-ignore = E203, E266, E501, W503
# exclude = .git,__pycache__,build,dist,.venv
# max-complexity = 10
